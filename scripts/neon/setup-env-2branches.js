#!/usr/bin/env node

/**
 * Script para Configura√ß√£o de 2 Branches - Economia de Custos
 *
 * Este script configura apenas 2 ambientes (production e development)
 * para manter o projeto no plano gratuito do NeonDB.
 *
 * Uso:
 *   node scripts/neon/setup-env-2branches.js
 */

const fs = require("fs");
const path = require("path");

// Templates otimizados para 2 branches apenas
const envTemplates = {
  ".env.local": {
    description: "Desenvolvimento Local (Branch: development)",
    emoji: "üü¢",
    content: `# ===============================================
# üü¢ NEONDB - DEVELOPMENT BRANCH (CUSTO ZERO)
# ===============================================
# ‚ö†Ô∏è  NUNCA commite este arquivo no Git!
# üí∞ Configura√ß√£o otimizada para plano gratuito

# NeonDB Connection Strings - Development Branch
DATABASE_URL="postgresql://username:password@ep-seu-projeto-123456.us-east-1.aws.neon.tech/neondb?sslmode=require"
DATABASE_URL_POOLED="postgresql://username:password@ep-seu-projeto-123456-pooler.us-east-1.aws.neon.tech/neondb?sslmode=require"

# Environment Configuration
NODE_ENV="development"
NEXT_PUBLIC_ENV="development"

# Database Configuration
DB_HOST="ep-seu-projeto-123456.us-east-1.aws.neon.tech"
DB_NAME="neondb"
DB_USER="username"
DB_PASSWORD="password"
DB_PORT="5432"
DB_SSL_MODE="require"
DB_BRANCH="development"

# Connection Pool Settings (otimizado para desenvolvimento)
DB_POOL_MIN=1
DB_POOL_MAX=5
DB_POOL_IDLE_TIMEOUT=30000
DB_POOL_CONNECTION_TIMEOUT=10000

# Application Settings
APP_DEBUG=true
LOG_LEVEL="debug"

# Economia de Custos
AUTO_SUSPEND="1 minute"
COMPUTE_SIZE="0.25 vCPU"

# ===============================================
# üí∞ CONFIGURA√á√ÉO DE ECONOMIA:
# ===============================================
# ‚úÖ Auto-suspend: 1 minuto (m√°xima economia)
# ‚úÖ Compute: 0.25 vCPU (m√≠nimo poss√≠vel)
# ‚úÖ Branch: development (dados isolados)
# ‚úÖ Pool m√≠nimo: 1 conex√£o apenas
# ===============================================`,
  },

  ".env.production": {
    description: "Produ√ß√£o (Branch: production)",
    emoji: "üî¥",
    content: `# ===============================================
# üî¥ NEONDB - PRODUCTION BRANCH (CUSTO M√çNIMO)
# ===============================================
# ‚ö†Ô∏è  NUNCA commite este arquivo no Git!
# üö® Use secrets managers em produ√ß√£o!

# NeonDB Connection Strings - Production Branch
DATABASE_URL="postgresql://username:password@ep-seu-projeto.us-east-1.aws.neon.tech/neondb?sslmode=require"
DATABASE_URL_POOLED="postgresql://username:password@ep-seu-projeto-pooler.us-east-1.aws.neon.tech/neondb?sslmode=require"

# Environment Configuration
NODE_ENV="production"
NEXT_PUBLIC_ENV="production"

# Database Configuration
DB_HOST="ep-seu-projeto.us-east-1.aws.neon.tech"
DB_NAME="neondb"
DB_USER="username"
DB_PASSWORD="password_super_segura"
DB_PORT="5432"
DB_SSL_MODE="require"
DB_BRANCH="production"

# Connection Pool Settings (otimizado para produ√ß√£o leve)
DB_POOL_MIN=2
DB_POOL_MAX=10
DB_POOL_IDLE_TIMEOUT=60000
DB_POOL_CONNECTION_TIMEOUT=15000

# Application Settings
APP_DEBUG=false
LOG_LEVEL="warn"

# Security Settings
ENABLE_QUERY_LOGGING=true
ENABLE_PERFORMANCE_MONITORING=true

# Economia de Custos
AUTO_SUSPEND="5 minutes"
COMPUTE_SIZE="0.25 vCPU"

# ===============================================
# üí∞ CONFIGURA√á√ÉO DE ECONOMIA:
# ===============================================
# ‚úÖ Auto-suspend: 5 minutos (balance economia/disponibilidade)
# ‚úÖ Compute: 0.25 vCPU (m√≠nimo poss√≠vel)
# ‚úÖ Branch: production (branch principal)
# ‚úÖ Pool otimizado: m√≠nimo necess√°rio
# ===============================================`,
  },

  ".env.example": {
    description: "Exemplo para 2 Branches (pode ser commitado)",
    emoji: "üìù",
    content: `# ===============================================
# üìù EXEMPLO - CONFIGURA√á√ÉO 2 BRANCHES NEONDB
# ===============================================
# Configura√ß√£o otimizada para CUSTO ZERO/M√çNIMO
# Copie para .env.local e configure com valores reais

# ===============================================
# üü¢ DEVELOPMENT BRANCH
# ===============================================
# DATABASE_URL="postgresql://usuario:senha@ep-projeto-123456.us-east-1.aws.neon.tech/neondb?sslmode=require"

# ===============================================  
# üî¥ PRODUCTION BRANCH
# ===============================================
# DATABASE_URL="postgresql://usuario:senha@ep-projeto.us-east-1.aws.neon.tech/neondb?sslmode=require"

# Environment Configuration
NODE_ENV="development"
NEXT_PUBLIC_ENV="development"

# Database Configuration
DB_HOST="ep-projeto.us-east-1.aws.neon.tech"
DB_NAME="neondb"
DB_USER="usuario"
DB_PASSWORD="senha_segura"
DB_PORT="5432"
DB_SSL_MODE="require"

# Connection Pool Settings (economia)
DB_POOL_MIN=1
DB_POOL_MAX=5
DB_POOL_IDLE_TIMEOUT=30000
DB_POOL_CONNECTION_TIMEOUT=10000

# ===============================================
# üí∞ PLANO GRATUITO NEON - LIMITES:
# ===============================================
# ‚úÖ Armazenamento: 512 MB
# ‚úÖ Compute: 0.25 vCPU
# ‚úÖ Transfer√™ncia: 3 GB/m√™s
# ‚úÖ Branches: Ilimitadas
# ‚úÖ Auto-suspend: Inclu√≠do
# ===============================================

# ===============================================
# üîß COMO CONFIGURAR:
# ===============================================
# 1. Copie este arquivo para .env.local
# 2. Substitua "ep-projeto" pelo ID real do seu projeto
# 3. Configure usu√°rio e senha reais
# 4. Teste: npm run db:test
# ===============================================`,
  },
};

function createOptimizedEnvFiles() {
  console.log("üí∞ Configura√ß√£o NeonDB - 2 Branches para Economia M√°xima\n");
  console.log("üéØ Objetivo: Manter no plano gratuito do Neon\n");

  const projectRoot = process.cwd();
  let filesCreated = 0;
  let filesSkipped = 0;

  for (const [filename, config] of Object.entries(envTemplates)) {
    const filePath = path.join(projectRoot, filename);

    console.log(`${config.emoji} Criando: ${filename}`);
    console.log(`   Descri√ß√£o: ${config.description}`);

    if (fs.existsSync(filePath)) {
      console.log(`   ‚ö†Ô∏è  Arquivo j√° existe - pulando...`);
      filesSkipped++;
    } else {
      try {
        fs.writeFileSync(filePath, config.content, "utf8");
        console.log(`   ‚úÖ Criado com sucesso!`);
        filesCreated++;
      } catch (error) {
        console.error(`   ‚ùå Erro ao criar arquivo: ${error.message}`);
      }
    }

    console.log("");
  }

  // Resumo da economia
  console.log("üí∞ Resumo da Configura√ß√£o de Economia:");
  console.log(`   ‚úÖ Arquivos criados: ${filesCreated}`);
  console.log(`   ‚ö†Ô∏è  Arquivos pulados: ${filesSkipped}`);
  console.log(`   üè∑Ô∏è  Branches configuradas: 2 (production + development)`);
  console.log(`   üíµ Custo estimado: R$ 0,00/m√™s (plano gratuito)`);

  // Instru√ß√µes espec√≠ficas para economia
  console.log("\nüí° Configura√ß√µes de Economia Aplicadas:");
  console.log("‚Ä¢ Auto-suspend: 1 min (dev) / 5 min (prod)");
  console.log("‚Ä¢ Compute: 0.25 vCPU em ambos os ambientes");
  console.log("‚Ä¢ Pool de conex√µes: M√≠nimo necess√°rio");
  console.log("‚Ä¢ Apenas 2 branches (sem staging)");

  // Pr√≥ximos passos
  console.log("\nüîß Pr√≥ximos Passos:");
  console.log("1. Configure seu projeto no console.neon.tech");
  console.log("2. Copie .env.example para .env.local");
  console.log('3. Substitua "ep-projeto" pelo ID real do seu projeto');
  console.log("4. Configure usu√°rio e senha reais");
  console.log("5. Teste: npm run db:test:dev");
  console.log("6. Monitore uso no dashboard do Neon");

  // Alertas de economia
  console.log("\n‚ö†Ô∏è  Alertas de Economia:");
  console.log("‚Ä¢ Monitore uso mensal (limite: 3 GB transfer√™ncia)");
  console.log("‚Ä¢ Mantenha auto-suspend habilitado");
  console.log("‚Ä¢ Evite queries desnecess√°rias");
  console.log("‚Ä¢ Use connection pooling para efici√™ncia");
}

function updatePackageScriptsForTwoBranches() {
  const packagePath = path.join(process.cwd(), "package.json");

  try {
    if (fs.existsSync(packagePath)) {
      const packageJson = JSON.parse(fs.readFileSync(packagePath, "utf8"));

      // Scripts otimizados para 2 branches
      const optimizedScripts = {
        "db:test": "node scripts/neon/test-connection.js dev",
        "db:test:dev": "node scripts/neon/test-connection.js dev",
        "db:test:prod": "node scripts/neon/test-connection.js prod",
        "db:test:all": "node scripts/neon/test-connection.js --all",
        "db:monitor": 'echo "üí∞ Monitore uso em: https://console.neon.tech"',
      };

      let scriptsAdded = 0;
      packageJson.scripts = packageJson.scripts || {};

      for (const [scriptName, scriptCommand] of Object.entries(
        optimizedScripts
      )) {
        if (!packageJson.scripts[scriptName]) {
          packageJson.scripts[scriptName] = scriptCommand;
          scriptsAdded++;
        }
      }

      if (scriptsAdded > 0) {
        fs.writeFileSync(
          packagePath,
          JSON.stringify(packageJson, null, 2),
          "utf8"
        );
        console.log(
          `\n‚úÖ Adicionados ${scriptsAdded} scripts otimizados ao package.json`
        );
        console.log("   Comandos dispon√≠veis:");
        console.log("   ‚Ä¢ npm run db:test (testa development)");
        console.log("   ‚Ä¢ npm run db:test:dev (testa development)");
        console.log("   ‚Ä¢ npm run db:test:prod (testa production)");
        console.log("   ‚Ä¢ npm run db:test:all (testa ambos)");
        console.log("   ‚Ä¢ npm run db:monitor (link para monitoramento)");
      }
    }
  } catch (error) {
    console.error("\n‚ùå Erro ao atualizar package.json:", error.message);
  }
}

function showCostOptimizationTips() {
  console.log("\nüí∞ DICAS PARA MANTER CUSTO ZERO:");
  console.log("‚îÅ".repeat(50));

  console.log("\nüìä Limites do Plano Gratuito:");
  console.log("‚Ä¢ Armazenamento: 512 MB");
  console.log("‚Ä¢ Compute: 0.25 vCPU");
  console.log("‚Ä¢ Transfer√™ncia: 3 GB/m√™s");
  console.log("‚Ä¢ Branches: Ilimitadas");

  console.log("\n‚ö° Configura√ß√µes Aplicadas:");
  console.log("‚Ä¢ Auto-suspend agressivo (1-5 min)");
  console.log("‚Ä¢ Compute m√≠nimo (0.25 vCPU)");
  console.log("‚Ä¢ Pool de conex√µes otimizado");
  console.log("‚Ä¢ Apenas 2 branches essenciais");

  console.log("\nüéØ Monitoramento:");
  console.log("‚Ä¢ Acesse: https://console.neon.tech");
  console.log("‚Ä¢ Verifique uso mensal de transfer√™ncia");
  console.log("‚Ä¢ Monitore tempo de compute ativo");
  console.log("‚Ä¢ Configure alertas se dispon√≠vel");

  console.log("\nüö® Evite Custos Extras:");
  console.log("‚Ä¢ N√£o desabilite auto-suspend");
  console.log("‚Ä¢ N√£o aumente compute sem necessidade");
  console.log("‚Ä¢ Evite transfer√™ncias desnecess√°rias");
  console.log("‚Ä¢ Use cache quando poss√≠vel");
}

// Executar script principal
function main() {
  console.log("üêò Setup NeonDB - 2 Branches (Economia M√°xima)\n");

  createOptimizedEnvFiles();
  updatePackageScriptsForTwoBranches();
  showCostOptimizationTips();

  console.log("\nüéâ Configura√ß√£o de economia conclu√≠da!");
  console.log("üìö Consulte: docs/markdown/NEONDB_SETUP_GUIDE.md");
}

// Executar se chamado diretamente
if (require.main === module) {
  main();
}

module.exports = {
  createOptimizedEnvFiles,
  updatePackageScriptsForTwoBranches,
  showCostOptimizationTips,
  envTemplates,
};
