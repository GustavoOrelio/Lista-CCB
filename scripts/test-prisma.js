#!/usr/bin/env node

/**
 * Script de Teste do Prisma
 * Testa a conex√£o com NeonDB usando Prisma Client
 */

require("dotenv").config();
const { PrismaClient } = require("@prisma/client");

async function testPrismaConnection() {
  console.log("üîç Testando Conex√£o Prisma com NeonDB...\n");

  const prisma = new PrismaClient({
    log: ["query", "info", "warn", "error"],
  });

  try {
    console.log("‚è≥ Conectando ao banco...");

    // Teste de conex√£o b√°sica
    await prisma.$connect();
    console.log("‚úÖ Conex√£o estabelecida com sucesso!");

    // Teste de query simples
    console.log("\n‚è≥ Executando query de teste...");
    const result = await prisma.$queryRaw`SELECT version()`;
    console.log("‚úÖ Query executada:", result[0].version);

    // Verificar se as tabelas existem (se j√° foram criadas)
    console.log("\n‚è≥ Verificando estrutura do banco...");
    const tables = await prisma.$queryRaw`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public'
      ORDER BY table_name;
    `;

    if (tables.length > 0) {
      console.log("‚úÖ Tabelas encontradas:");
      tables.forEach((table) => {
        console.log(`   ‚Ä¢ ${table.table_name}`);
      });
    } else {
      console.log("‚ö†Ô∏è  Nenhuma tabela encontrada. Execute: npx prisma db push");
    }

    // Teste de modelos (se tabelas existirem)
    if (tables.length > 0) {
      console.log("\n‚è≥ Testando modelos Prisma...");

      try {
        const usuarioCount = await prisma.usuario.count();
        const igrejaCount = await prisma.igreja.count();
        const cargoCount = await prisma.cargo.count();
        const voluntarioCount = await prisma.voluntario.count();

        console.log("‚úÖ Contagem de registros:");
        console.log(`   ‚Ä¢ Usu√°rios: ${usuarioCount}`);
        console.log(`   ‚Ä¢ Igrejas: ${igrejaCount}`);
        console.log(`   ‚Ä¢ Cargos: ${cargoCount}`);
        console.log(`   ‚Ä¢ Volunt√°rios: ${voluntarioCount}`);
      } catch (modelError) {
        console.log("‚ö†Ô∏è  Erro ao acessar modelos:", modelError.message);
        console.log("üí° Execute: npx prisma db push para criar as tabelas");
      }
    }
  } catch (error) {
    console.error("‚ùå Erro na conex√£o:", error.message);

    if (error.message.includes("ENOTFOUND")) {
      console.log("\nüí° Dicas para resolver:");
      console.log(
        "1. Verifique se DATABASE_URL est√° configurada no .env.local"
      );
      console.log("2. Confirme se o endpoint do NeonDB est√° correto");
      console.log("3. Verifique se o projeto NeonDB est√° ativo");
    } else if (error.message.includes("authentication")) {
      console.log("\nüí° Erro de autentica√ß√£o:");
      console.log("1. Verifique usu√°rio e senha na DATABASE_URL");
      console.log("2. Confirme se o usu√°rio tem permiss√µes no banco");
    }
  } finally {
    await prisma.$disconnect();
    console.log("\nüîå Conex√£o encerrada.");
  }
}

async function showEnvironmentInfo() {
  console.log("üîß Informa√ß√µes do Ambiente:");
  console.log(`   ‚Ä¢ NODE_ENV: ${process.env.NODE_ENV || "undefined"}`);
  console.log(
    `   ‚Ä¢ DATABASE_URL: ${
      process.env.DATABASE_URL ? "‚úÖ Configurada" : "‚ùå N√£o configurada"
    }`
  );

  if (process.env.DATABASE_URL) {
    const url = process.env.DATABASE_URL;
    const host = url.match(/@([^/]+)/)?.[1] || "n√£o encontrado";
    const dbName = url.match(/\/([^?]+)/)?.[1] || "n√£o encontrado";
    console.log(`   ‚Ä¢ Host: ${host}`);
    console.log(`   ‚Ä¢ Database: ${dbName}`);
  }
  console.log("");
}

async function main() {
  console.log("üêò Teste de Conex√£o Prisma + NeonDB\n");

  await showEnvironmentInfo();
  await testPrismaConnection();

  console.log("\nüéâ Teste conclu√≠do!");
  console.log("üìö Pr√≥ximos passos:");
  console.log("1. Se n√£o h√° tabelas: npx prisma db push");
  console.log("2. Para popular dados: criar seeds");
  console.log("3. Para ver no Studio: npx prisma studio");
}

if (require.main === module) {
  main().catch(console.error);
}
